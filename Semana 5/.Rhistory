mi_dataframe <- read.csv("anexo1.csv")
anexo1 <- read.csv2("C:/Users/willi/GITHUB/MULTIVARIATE-ANALYSIS/Semana 5/anexo1.csv")
View(anexo1)
df <- read.csv2("anexo1.csv")
str(df)
head(df)
summary(df)
library(ggplot2)
# Histograms for each variable
ggplot(stack(df), aes(x = values, fill = ind)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 10) +
labs(title = "Histograms of Variables", x = "Values", y = "Frequency") +
facet_wrap(~ind, scales = "free") +
theme_minimal()
library(reshape2)
# Boxplot
ggplot(df_long, aes(x = variable, y = value, fill = variable)) +
geom_boxplot() +
labs(title = "Boxplots de las Variables", y = "Valores") +
theme_minimal()
# Boxplot
ggplot(df_long, aes(x = variable, y = value, fill = variable)) +
geom_boxplot() +
labs(title = "Boxplots de las Variables", y = "Valores") +
theme_minimal()
df_long <- melt(df)
# Boxplot
ggplot(df_long, aes(x = variable, y = value, fill = variable)) +
geom_boxplot() +
labs(title = "Boxplots de las Variables", y = "Valores") +
theme_minimal()
# Histograma
ggplot(df_long, aes(x = value, fill = variable)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 10) +
facet_wrap(~variable, scales = "free") +
labs(title = "Histogramas de las Variables", x = "Valores", y = "Frecuencia") +
theme_minimal()
# Histograms for each variable
ggplot(stack(df), aes(x = values, fill = ind)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 10) +
labs(title = "Histograms of Variables", x = "Values", y = "Frequency") +
facet_wrap(~ind, scales = "free") +
theme_minimal()
library(MVN)
install.packages("MVN")
library(MVN)
# Evaluar la normalidad multivariada
mvn_result <- mvn(data = df, mvnTest = "mardia")
# Mostrar resultados
print(mvn_result)
install.packages("mvtnorm")
library(mvtnorm)
# Hotelling's T^2 function (if you haven't defined it yet)
hotelling_t2 <- function(data1, data2) {
n1 <- nrow(data1)
n2 <- nrow(data2)
# Means
mean1 <- colMeans(data1)
mean2 <- colMeans(data2)
# Covariance matrices
S1 <- cov(data1)
S2 <- cov(data2)
# Pooled covariance matrix
S_pooled <- ((n1 - 1) * S1 + (n2 - 1) * S2) / (n1 + n2 - 2)
# Hotelling's T^2 statistic
T2 <- (n1 * n2) / (n1 + n2) * t(mean1 - mean2) %*% solve(S_pooled) %*% (mean1 - mean2)
# Degrees of freedom
df1 <- ncol(data1)  # Number of variables
df2 <- n1 + n2 - df1 - 1  # Degrees of freedom
# Convert T^2 to F-statistic
F <- (df2 * T2) / (df1 * (n1 + n2 - 2))
# p-value
p_value <- 1 - pf(F, df1, df2)
return(list(T2 = T2, F = F, p_value = p_value))
}
# Run the Hotelling's T^2 test
result <- hotelling_t2(data1, data2)
# Split the data into two groups
# Create two groups
data1 <- df[1:20, c("X1", "X2", "X3")]
data2 <- df[21:40, c("X1", "X2", "X3")]
# Hotelling's T^2 function (if you haven't defined it yet)
hotelling_t2 <- function(data1, data2) {
n1 <- nrow(data1)
n2 <- nrow(data2)
# Means
mean1 <- colMeans(data1)
mean2 <- colMeans(data2)
# Covariance matrices
S1 <- cov(data1)
S2 <- cov(data2)
# Pooled covariance matrix
S_pooled <- ((n1 - 1) * S1 + (n2 - 1) * S2) / (n1 + n2 - 2)
# Hotelling's T^2 statistic
T2 <- (n1 * n2) / (n1 + n2) * t(mean1 - mean2) %*% solve(S_pooled) %*% (mean1 - mean2)
# Degrees of freedom
df1 <- ncol(data1)  # Number of variables
df2 <- n1 + n2 - df1 - 1  # Degrees of freedom
# Convert T^2 to F-statistic
F <- (df2 * T2) / (df1 * (n1 + n2 - 2))
# p-value
p_value <- 1 - pf(F, df1, df2)
return(list(T2 = T2, F = F, p_value = p_value))
}
# Run the Hotelling's T^2 test
result <- hotelling_t2(data1, data2)
# Show results
print(result)
# Evaluar la normalidad multivariada
mvn_result <- mvn(data = df, mvnTest = "mardia")
# Mostrar resultados
print(mvn_result)
colMeans(df)
x_barra=colmeans(df)
x_barra=colMeans(df)
knitr::opts_chunk$set(echo = TRUE)
```{r}
X <- read.csv2("anexo1.csv")
1. El archivo 'anexo1.csv' contiene los datos de una muestra de vectires akeatiruas de 3 componentes.
1.*s* El archivo 'anexo1.csv' contiene los datos de una muestra de vectores aleatorios de 3 componentes.
---
title: "Análisis Multivariado"
library(MVN)
print(mardia_test)
mardia_test <- mvn(X, mvnTest = "mardia")
print(mardia_test)
mardia_test
### Solución 1
---
knitr::opts_chunk$set(echo = TRUE)
qchisq(1 - alpha, 4)
qchisq(1 - 0.05, 4)
qchisq(1 - 0.005, 4)
qchisq(1 - 0.005, 2)
qchisq(1 - 0.05, 2)
library(MultBiplotR)
if (!requireNamespace("MultBiplotR", quietly = TRUE)) {
install.packages("MultBiplotR")
}
X<-data("Protein")
protein
library(MultBiplotR)
X<-data("Protein")
protein
Protein
data("Protein")
X <- Protein[, c("Red_Meat ", "White_Meat ", "Eggs", "Milk", "Fish", "Cereals", "Starch", "Nuts", "Fruits_Vegetables")]
selected_columns <- Protein[, c("RedMeat", "WhiteMeat", "Eggs", "Milk", "Fish", "Cereals", "Starch", "Nuts", "FruitVeg")]
X <- Protein[, c("Red Meat ", "White Meat ", "Eggs", "Milk", "Fish", "Cereals", "Starch", "Nuts", "Fruits Vegetables")]
str(Protein)
selected_columns <- Protein[, c("Red_Meat", "White_Meat", "Eggs", "Milk", "Fish", "Cereal", "Starch", "Nuts", "Fruits_Vegetables")]
library(gridExtra)
head(Protein)
X2 <- Protein[, c("Red_Meat", "White_Meat", "Eggs", "Milk", "Fish", "Cereal", "Starch", "Nuts", "Fruits_Vegetables")]
X2[] <- lapply(X, as.numeric)
head(X2)
X2 <- Protein[, c("Red_Meat", "White_Meat", "Eggs", "Milk", "Fish", "Cereal", "Starch", "Nuts", "Fruits_Vegetables")]
X2[] <- lapply(X2, as.numeric)
head(X2)
View(X2)
if (!requireNamespace("car", quietly = TRUE)) {
install.packages("car")
}
library(car)
knitr::opts_chunk$set(echo = TRUE)
head(Protein)
summary(media_por_region)
tinytex::install_tinytex()
